name: nomad-pack

on:
  push:
    paths:
      - 'ghost.nomad'
      # - 'images/**'

jobs:
  setup-nomad-pack:
    runs-on: ubuntu-latest
    name: Run Nomad Pack
    env:
      NOMAD_ADDR: http://192.168.1.86:4646
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_KEY }}

      - name: Install Nomad CLI
        run: |
          echo "Instalando Nomad CLI..."
          curl -fsSL https://releases.hashicorp.com/nomad/1.9.4/nomad_1.9.4_linux_amd64.zip -o nomad.zip
          unzip nomad.zip
          sudo mv nomad /usr/local/bin/
          nomad --version

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG="leandroaurelio/ghost:${{ github.run_number }}"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

          # Tag the image as 'latest'
          docker tag $IMAGE_TAG leandroaurelio/ghost:latest
          docker push leandroaurelio/ghost:latest

      - name: Replace Variables for Deploy
        run: |
          if [[ "${{ github.ref_name }}" == "bench" ]]; then
            NAMESPACE="${{ secrets.BENCH_NAMESPACE }}"
            SITE_URL="${{ secrets.BENCH_SITE_URL }}"
            PORT="${{ secrets.BENCH_PORT }}"
          elif [[ "${{ github.ref_name }}" == "master" ]]; then
            NAMESPACE="${{ secrets.PROD_NAMESPACE }}"
            SITE_URL="${{ secrets.PROD_SITE_URL }}"
            PORT="${{ secrets.PROD_PORT }}"
          else
            echo "Branch não reconhecida. Abortando."
            exit 1
          fi
  
          # Substituir os placeholders no arquivo ghost.nomad
          sed -i "s|__NAMESPACE__|$NAMESPACE|g" ghost.nomad
          sed -i "s|__SITE_URL__|$SITE_URL|g" ghost.nomad
          sed -i "s|__PORT__|$PORT|g" ghost.nomad

      - name: Substitute placeholders with secrets
        run: |
          sed -i "s|__USER_MAIL__|${{ secrets.USER_MAIL }}|g" ghost.nomad
          sed -i "s|__USER_PASSWORD__|${{ secrets.USER_PASSWORD }}|g" ghost.nomad
          sed -i "s|__MYSQL_ROOT_PASSWORD__|${{ secrets.MYSQL_ROOT_PASSWORD }}|g" ghost.nomad
          sed -i "s|__MYSQL_DATABASE__|${{ secrets.MYSQL_DATABASE }}|g" ghost.nomad
          sed -i "s|__MYSQL_USER__|${{ secrets.MYSQL_USER }}|g" ghost.nomad
          sed -i "s|__MYSQL_PASSWORD__|${{ secrets.MYSQL_PASSWORD }}|g" ghost.nomad

      - name: Test jump server connection
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          cat private_key
          chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.JUMP_SERVER_USER }}@${{ secrets.JUMP_SERVER_IP }} "echo 'Conexão com o jump server estabelecida.'"
          rm private_key

      - name: Send ghost.nomad to Jump Server
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          scp -o StrictHostKeyChecking=no -i private_key ghost.nomad ${{ secrets.JUMP_SERVER_USER }}@${{ secrets.JUMP_SERVER_IP }}:/tmp/ghost_${{ github.run_number }}.nomad
          rm private_key

      - name: Plan job and capture Job Modify Index
        id: plan
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          INDEX=$(ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.JUMP_SERVER_USER }}@${{ secrets.JUMP_SERVER_IP }} "nomad job plan /tmp/ghost_${{ github.run_number }}.nomad | awk '/Job Modify Index/ {print \$4}'")
          if [[ -z "$INDEX" ]]; then
            echo "Erro: Não foi possível capturar o Job Modify Index."
            exit 1
          fi
          echo "INDEX=$INDEX" >> $GITHUB_ENV
          rm private_key

      - name: Deploy job and capture Deployment ID
        run: |
          echo "Iniciando o deploy..."
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key            
          OUTPUT=$(ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.JUMP_SERVER_USER }}@${{ secrets.JUMP_SERVER_IP }} "nomad job run -namespace=$NAMESPACE -check-index ${{ env.INDEX }} /tmp/ghost_${{ github.run_number }}.nomad || echo 'Erro transitório ignorado'")
          echo "Saída do comando: $OUTPUT"
          rm private_key

          DEPLOYMENT_ID=$(echo "$OUTPUT" | grep -oP '(?<=Monitoring deployment ")[^"]+')
            
          if [[ -z "$DEPLOYMENT_ID" ]]; then
            echo "Erro: Não foi possível capturar o Deployment ID."
            exit 1
          fi
  
          echo "Deployment ID capturado: $DEPLOYMENT_ID"
          echo "Registrando o Deployment id em $GITHUB_WORKSPACE/deployment_id.txt"
          echo "$DEPLOYMENT_ID" > $GITHUB_WORKSPACE/deployment_id.txt
          echo "$DEPLOYMENT_ID" > deployment_id.txt
          OUTPUT_ID=$(cat $GITHUB_WORKSPACE/deployment_id.txt)
          echo "Arquivo final $OUTPUT_ID"
          echo "Fim"
        shell: /usr/bin/bash -e {0}

      - name: Upload deployment_id artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-id
          path: deployment_id.txt

      - name: Show Deployment ID
        run: cat deployment_id.txt

  approve:
    runs-on: ubuntu-latest
    name: Promover deployment
    needs: [setup-nomad-pack]
    env:
      NOMAD_ADDR: http://192.168.1.86:4646

    steps:
      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_KEY }}  

      - name: Instalar Nomad CLI
        run: |
          curl -fsSL https://releases.hashicorp.com/nomad/1.9.4/nomad_1.9.4_linux_amd64.zip -o nomad.zip
          unzip nomad.zip
          sudo mv nomad /usr/local/bin/

      - name: Run a one-line script
        run: echo "Hello, ${{ github.event.inputs.environment }}!"

      - name: Download deployment_id artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-id

      - name: Read Deployment ID from artifact and Promote
        run: |
          DEPLOYMENT_ID2=$(cat $GITHUB_WORKSPACE/deployment_id.txt)
          echo "Deployment ID: $DEPLOYMENT_ID2"

          if [[ "${{ github.ref_name }}" == "bench" ]]; then
            NAMESPACE="${{ secrets.BENCH_NAMESPACE }}"
            SITE_URL="${{ secrets.BENCH_SITE_URL }}"
            PORT="${{ secrets.BENCH_PORT }}"
          elif [[ "${{ github.ref_name }}" == "master" ]]; then
            NAMESPACE="${{ secrets.PROD_NAMESPACE }}"
            SITE_URL="${{ secrets.PROD_SITE_URL }}"
            PORT="${{ secrets.PROD_PORT }}"
          else
            echo "Branch não reconhecida. Abortando."
            exit 1
          fi

          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key

          DEPLOYMENT_STATUS=$(ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.JUMP_SERVER_USER }}@${{ secrets.JUMP_SERVER_IP }} "nomad deployment status $DEPLOYMENT_ID2 | grep 'Status'")
          echo "Deployment status: $DEPLOYMENT_STATUS"

          if [[ "$DEPLOYMENT_STATUS" == *"successful"* || "$DEPLOYMENT_STATUS" == *"failed"* ]]; then
            echo "Deployment já está finalizado. Nenhuma ação necessária."
          else
            ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.JUMP_SERVER_USER }}@${{ secrets.JUMP_SERVER_IP }} "nomad deployment promote -namespace=$NAMESPACE $DEPLOYMENT_ID2"
          fi

          # ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.JUMP_SERVER_USER }}@${{ secrets.JUMP_SERVER_IP }} "nomad deployment promote -namespace=$NAMESPACE $DEPLOYMENT_ID2"
          rm private_key